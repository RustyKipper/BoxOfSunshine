/*This code if for the Rusty Kipper Solar BMS to Solis inverter converter board
   It sends a request to the BMS which then returns a block of data including
   battery Voltage, charge / discharge current, temperature and various flags.
   This code then reads these via RS485 and stores them in an array, which is then
   broken down into individual parts, converted to human readable format for debugging
   and send via can bus to the invrter.
*/

#include <Arduino.h>
#include <SPI.h>
#include <mcp_can.h>
#include <SoftwareSerial.h>



const byte rxPin = 19;                       //  RS485 receive pin (D19)
const byte txPin = 18;                       //  RS485 transmit pin (D18)
const byte TX_enable = 4;                    //  RS485 transmit enable pin
const byte heater = 5;                      //  heater relay output pin
const byte ledPin = 7;                      //  used for debugging on uno
const byte comms = 14;                      //  comms good led output pin
const byte charge = 15;                     //  charge led output pin
const byte discharge = 16;                  //  discharge led output pin

const byte numChars = 40;                   //  index for array
uint8_t receivedChars[numChars];
boolean newData = false;                    //  flag indicating new dataq received
unsigned long previousMillis = 0;           //  used for code cycle timing
const long interval = 1000;                 //  code cycle time (set for 1 second)
byte CAN_MSG[8] = {0, 0, 0, 0, 0, 0, 0, 0}; //  array for transmitted can bus message
uint16_t addressID = 0;                     //  address of can bus message to be sent
//byte sndStat = 0;
uint8_t MSG_RustyK[8] = {'G', 0x52, 0x49, 0x54, 0x45, 0x43, 0x48, 0x20}; //  manufaturers name

int temperaureCombined = 0;                 //  average temperature of NTC2 and NTC3

int heaterSet = 15;                         //  ************ this value sets the heater cut un temperature******

bool ledState = LOW;

byte request[] = {0xDD, 0xA5, 0x03, 0x00, 0xFF, 0xFD, 0x77};  //  code sent to BMS to request data

int counter = 10;

//------------------------- incoming protection flags from BMS ---------------
bool singleCellOVP = 0;
bool singleCellUVP = 0;
bool packOVP = 0;
bool packUVP = 0;
bool chargeHiTemp = 0;
bool chargeLoTemp = 0;
bool dischargeHiTemp = 0;
bool dischargeLoTemp = 0;
bool chargeOverCurrent = 0;
bool dischargeOverCurrent = 0;
bool shortCircuit_flag = 0;
bool frontEndIcFailFlag = 0;
bool MosSoftwareLockFlag = 0;

//------------------ incoming values from BMS --------------------------------

uint8_t read_write =              (receivedChars[0]);   //  0x05 = reading BMS  0x03 = writing to BMS
uint8_t error_status =            (receivedChars[1]);   //  0x80 = error        0x00  = OK
uint8_t data_length =             (receivedChars[2]);   //  dta length of received packet including this byte
uint8_t Volt_low_byte =           (receivedChars[3]);   //  required  total Voltage
uint8_t Volt_high_byte =          (receivedChars[4]);   //  required  total Voltage
uint8_t current_high_byte =       (receivedChars[5]);   //  required  current ********* check reads negative
uint8_t current_low_byte =        (receivedChars[6]);   //  required  current ********* check reads negative
uint8_t balance_cap_hbyte =       (receivedChars[7]);   //  4 byte long number
uint8_t balance_cap_lbyte =       (receivedChars[8]);   //  4 byte long number
uint8_t rate_cap_hbyte =          (receivedChars[9]);   //  capcity of battery in mAh i.e. 305000 = 305Ah
uint8_t rate_cap_lbyte =          (receivedChars[10]);  //  capcity of battery in mAh i.e. 305000 = 305Ah
uint8_t cycle_hbyte =             (receivedChars[11]);  //  number of charge / discharge cycles (currently not used)
uint8_t cycle_lbyte =             (receivedChars[12]);  //  number of charge / discharge cycles (currently not used)
uint8_t prod_date_hbyte =         (receivedChars[13]);  //  production date of BMS
uint8_t prod_date_lbyte =         (receivedChars[14]);  //  production date of BMS
uint8_t bal_status_hbyte =        (receivedChars[15]);  //  8 x cell balance flags  0 = not balancing 1 = balance in progress
uint8_t bal_status_lbyte =        (receivedChars[16]);  //  8 x cell balance flags  0 = not balancing 1 = balance in progress
uint8_t prot_status_high_byte =   (receivedChars[19]);  //  8 x cell protection flags 0 = protection off  1 = protection on
uint8_t prot_status_low_byte =    (receivedChars[20]);  //  8 x cell protection flags 0 = protection off  1 = protection on
uint8_t versionNo =               (receivedChars[21]);  //  BMS software version
uint8_t RSOC =                    (receivedChars[22]);  //  remaining charge capaicty 0-100%
uint8_t fet_status =              (receivedChars[23]);  //  bit 0 = charge 0  bit 1 = discharge   0 = FET off 1 = FET on
uint8_t num_of_strings =          (receivedChars[24]);  //  number of series connected cells (should read 16)
uint8_t num_of_NTCS =             (receivedChars[25]);  //  number of temperature thermistors (should read 3)
uint8_t temperature_1_low_byte =  (receivedChars[26]);  //  thermistor temperature 1
uint8_t temperatue_1_high_byte =  (receivedChars[27]);  //  thermistor temperature 1
uint8_t temperature_2_low_byte =  (receivedChars[28]);  //  thermistor temperature 2
uint8_t temperatue_2_high_byte =  (receivedChars[29]);  //  thermistor temperature 2
uint8_t temperature_3_low_byte =  (receivedChars[30]);  //  thermistor temperature 3
uint8_t temperatue_3_high_byte =  (receivedChars[31]);  //  thermistor temperature 3

//----------------- converterd numbers ------------------------------------------

uint16_t rate = 0;              //  battery capacity rate in mAh
int Ah_rate = 0;                //  human readable format for debugging
int temp_1 = 0;                 //  sined 16 bit int for raw temperature 1
int temp_2 = 0;                 //  sined 16 bit int for raw temperature 1
int temp_3 = 0;                 //  sined 16 bit int for raw temperature 1
int temperature_1 = 0;          //  int for converted temperature
int temperature_2 = 0;          //  int for converted temperature
int temperature_3 = 0;          //  int for converted temperature

int V_result = 0;               //  16 bit int for battery Voltage
int I_result = 0;               //  16 bit int for battery current
uint8_t amps = 0;               //  8 bit current
float Voltage = 0.0;            //  human readable float for debugging
float current = 0.0;            //  human readable float for debugging


//---------- outgoing values to inverter --------------------------------------------

//protection
byte byte_A0 = 100; //  0x359   OVP, UVP, Over temp, UT, discharge over current
byte byte_A1 = 101; //          Over charge current, sytem error
byte byte_A2 = 102; //          high voltage, low voltage, high temp, low lemp
byte byte_A3 = 103; //          hich charge current, int comms fail
byte byte_A4 = 104; //          Modue numbers 8 bit unsigned number
byte byte_A5 = 105; //          "P" 0x50
byte byte_A6 = 106; //          "N" 0x4E
byte byte_A7 = 107;

//------------------- charge discharge temperature -------------------------------------

byte chargeVoltageLowByte = 0;            //  0x351 charge current low byte
byte dischargeVoltageHighByte = 1;        //        charge current high byte
byte chargeCurrentLimitLowByte = 2;       //        charge current limit low byte
byte chargeCurrentLimitHighByte = 3;      //        charge current limit high byte
byte dischargeCurrentLimitLowByte = 4;    //        discharge current limit low byte
byte dischargeCurrentLimitHighByte = 5;   //        discharge current limit high byte
byte byte_B6 = 6;                         //        not used
byte byte_B7 = 7;                         //        not used

uint16_t stateOfCharge = 0x00;            //  state of charge read from BMS
uint16_t batVoltage = 0;
uint16_t batCurrent = 0;
uint16_t batTemperature = 0;
uint32_t batCapacity = 0;

//state of charge, state of health
byte stateOfChargeLowByte = 8;      //     0x355 state of charge low byte (unit 1%)
byte stateOfChargeHighByte = 9;     //         state of charge high byte (unit 1%)
byte stateOfHealthLowByte = 10;     //         state of health low byte (unit 1%)
byte stateOfHealthHighByte = 11;    //        state of health low high (unit 1%)
byte byte_C4 = 12;   //                      not used
byte byte_C5 = 13;   //                      not used
byte byte_C6 = 14;   //                      not used
byte byte_C7 = 15;   //                      not used

byte packVoltageLowByte = 16;     //  0x356 Pack Voltage low byte (unit 0.01V)
byte packVoltageHighByte = 17;    //        Pack Voltage high byte (unit 0.01V)
byte packCurrentLowByte = 18;     //        pack current low byte (unit 0.1A)
byte packCurrentHighByte = 19;    //        pack current high byte (unit 0.1A)
byte packTempLowByte = 20;        //        pack temperature low byte (unit 0.1'C)
byte packTempHighByte = 21;       //        pack temperature high byte (unit 0.1'C)
byte byte_D6 = 22;                //        not used
byte byte_D7 = 23;                //        not used

byte requestFlagLowByte = 0;      //  0x35C request flags
byte requestFlagHighByte = 0;     //


uint16_t ChargeCurrentLimit = 0xC350;    //  set max charge current to 50A (50,000mA)

uint16_t dischargeCurrentLimit = 0xC350; //  set max discharge current to 50A (50,000mA)

//inverter battery limits

uint32_t chargeVoltage = 0;
uint32_t dischargeVoltage = 0;
uint32_t chargeCurrent = 0;        //  charge current in mA
uint32_t dischargeCurrent = 0;     //  discharge current in mA




//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


SoftwareSerial RS485Serial (rxPin, txPin);

MCP_CAN CAN0(10);     // Set CS to pin 10

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

void setup() {
  pinMode(rxPin, INPUT);      //  set RS485 receive pin as input
  pinMode(txPin, OUTPUT);     //  set RS485 transmit pin as output
  pinMode(TX_enable, OUTPUT); //  set RS485 transmit enable pin as output
  pinMode(heater,OUTPUT);      //  set heater pin as output
  pinMode(comms, OUTPUT);     //  set comms led pin to output
  pinMode(charge, OUTPUT);    //  set charge led pin to output
  pinMode(discharge, OUTPUT); //  set discharge led pin to output
  pinMode(ledPin, OUTPUT);

  // Initialize MCP2515 running at 16MHz with a baudrate of 500kb/s and the masks and filters disabled.

  if (CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK) Serial.println("MCP2515 Initialized Successfully!");
  else Serial.println("Error Initializing MCP2515...");


  CAN0.setMode(MCP_NORMAL);   // Change to normal mode to allow messages to be transmitted

  Serial.begin(115200);       //  initialise serial for IDE console to allow debugging
  RS485Serial.begin(9600);    //  initialise serial for RS485

  //---------- startup lamptest -----------------
  digitalWrite(comms, HIGH);
  digitalWrite(charge, HIGH);
  digitalWrite(discharge, HIGH);
  delay(1000);
  digitalWrite(comms, LOW);
  digitalWrite(charge, LOW);
  digitalWrite(discharge, LOW);
  //----------------------------------------------

  digitalWrite(heater, HIGH);
  Serial.println("Rusty Kipper Designs");    //  for debugging this indicates basic comunication with console


}
//=========================================================================================
//vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv main loop vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

void loop() {

  //--------------------- untimed code -------this runs constanty in the background-----------------



  receive();    //  call receive routine





  //------------------------------end of untimed code -------------------------------------------

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {

    // save the last time you blinked the LED
    previousMillis = currentMillis;
    //----------------------------- timed code, this code runs once per second --------------------------



    //****************************** this is for first stage debugging, the comms led flashes once per second******
    if (ledState == LOW) {
      ledState = HIGH;
    } else {
      ledState = LOW;
    }

    digitalWrite(ledPin, ledState);


    //**************************************************************************************************************


    sendRequest();




    storeIncoming();      //  loads incoming data into individual arrays

    convert();            //  convert values read from BMS to values the inverter can understand
    //                            and human readable format for debugging

    canbusSend();         //  send can bus message to inverter

   // temperatureControl(); //  turn on heater if battery below set tmperature


    showNewDataHEX();     // prints line of full recieved data in HEX format for debugging





    //---------------------------------- end of timed code -------------------------------------------
  }
}
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//================================= end of main loop ==================================================
//================================= subroutines =======================================================


void sendRequest() {        //----------------- request data packet from BMS --------------------

  digitalWrite(TX_enable, HIGH);              //  set MAX485 chip to transmit mode
  digitalWrite(heater, HIGH);

  //RS485Serial.write(request, sizeof(7));      //  send request for BMS to send data

  RS485Serial.write(0xDD);
  RS485Serial.write(0xA5);
  RS485Serial.write(0xAA);
  RS485Serial.write((byte)0x00);
  RS485Serial.write(0xFF);
  RS485Serial.write(0x56);
  RS485Serial.write(119);
/*
Serial.println("serial request");
Serial.print(0xDD);
Serial.print(0xA5);
Serial.print(0xAA);
Serial.print((byte)0x00);
Serial.print(0xFF);
Serial.print(0x56);
Serial.print(119);
*/






  delay(3);                                   //  short delay to enable serial to finish sending

  digitalWrite(TX_enable, LOW);               //  return MAX485 chip back to receive mode
  digitalWrite(heater, LOW);
}

//________________________________________________________________________________________________________

void receive() {          //------------------- receive serial data from RS485 ----------------


  static boolean recvInProgress = false;
  static byte ndx = 0;
  char startMarker = 221;
  char endMarker = 119;
  char rc;

  while (RS485Serial.available() > 0 && newData == false) {

    rc = RS485Serial.read();

    if (recvInProgress == true) {

      if (rc != endMarker) {

        receivedChars[ndx] = rc;
        ndx++;
        if (ndx >= numChars) {

          ndx = numChars - 1;
        }
      }
      else {
        receivedChars[ndx] = '\0'; // terminate the string
        recvInProgress = false;
        ndx = 0;
        newData = true;
      }
    }
    else if (rc == startMarker) {
      recvInProgress = true;
    }
  }
}

//____________________________________________________________________________________________

void showNewDataHEX() {

  //  this code prints every 10 seconds to make it easier to read on the serial console


  counter ++;                   //  increment counter one per second
  //if (counter > 10) {           //  run the following code once per 10 seconds

    Serial.println(" ");
    Serial.println(" ");
    Serial.print("Recieved data packet   ");

    if (newData == true) {
      for (int i = 0; i < 35; i++) {

        Serial.print(receivedChars[i], HEX);
        Serial.print(" ");
      }
    }
    newData = false;
    Serial.println(" ");





      Serial.print("Voltage  ");
      Serial.print(Voltage);
      Serial.println(" V");
      Serial.print("current  ");
      Serial.print(current);
      Serial.println(" A");
      Serial.print("balance capacity  ");
      Serial.print(Ah_rate);
      Serial.println(" Ah");
      Serial.print("software verion   ");
      Serial.println(versionNo, DEC);
      Serial.print("remaing capacity  ");
      Serial.print(RSOC);
      Serial.println(" %");
      Serial.print("temperature 1:  ");
      Serial.print(temperature_1);
      Serial.println(" 'C");
      Serial.print("temperature 2:  ");
      Serial.print(temperature_2);
      Serial.println(" 'C");
      Serial.print("temperature 3:  ");
      Serial.print(temperature_3);
      Serial.println(" 'C");
      Serial.println(" ");
      Serial.println(" ");
      Serial.println("Flags");
      Serial.println(" ");
      Serial.print("cell OVP:  ");
      Serial.println(singleCellOVP);
      Serial.print("cell UVP:  ");
      Serial.println(singleCellUVP);
      Serial.print("pack OVP:  ");
      Serial.println(packOVP);
      Serial.print("pack UVP:  ");
      Serial.println(packUVP);
      Serial.print("charge Hi Temp:  ");
      Serial.println(chargeHiTemp);
      Serial.print("charge Lo Temp:  ");
      Serial.println(chargeLoTemp);
      Serial.print("discharge Hi Temp:  ");
      Serial.println(dischargeHiTemp);
      Serial.print("discharge Lo Temp:  ");
      Serial.println(dischargeLoTemp);
      Serial.print("charge Over Current:  ");
      Serial.println(chargeOverCurrent);
      Serial.print("discharge Over Current:  ");
      Serial.println(dischargeOverCurrent);
      Serial.print("short Circuit flag:  ");
      Serial.println(shortCircuit_flag);
      Serial.print("front End Ic Fail Flag:  ");
      Serial.println(frontEndIcFailFlag);
      Serial.print("Mos Software Lock Flag:  ");
      Serial.println(MosSoftwareLockFlag);
    



    counter = 0;
  //}
}

//__________________________________________________________________________________________________


void storeIncoming() {  //---------------------- Store incoming data ------------------------------

  //  this section breaks down the incomming data packet and stores the relevent data into arrays


  //----protection bits -----------------------------------------------------------

  singleCellOVP =        bitRead(prot_status_high_byte, 0);
  singleCellUVP =        bitRead(prot_status_high_byte, 1);
  packOVP =              bitRead(prot_status_high_byte, 2);
  packUVP =              bitRead(prot_status_high_byte, 3);
  chargeHiTemp =         bitRead(prot_status_high_byte, 4);
  chargeLoTemp =         bitRead(prot_status_high_byte, 5);
  dischargeHiTemp =      bitRead(prot_status_high_byte, 6);
  dischargeLoTemp =      bitRead(prot_status_high_byte, 7);
  chargeOverCurrent =    bitRead(prot_status_low_byte, 0);
  dischargeOverCurrent = bitRead(prot_status_low_byte, 1);
  shortCircuit_flag =    bitRead(prot_status_low_byte, 2);
  frontEndIcFailFlag =   bitRead(prot_status_low_byte, 3);
  MosSoftwareLockFlag =  bitRead(prot_status_low_byte, 4);


  //------analog values--------------------------------------------------------------

  read_write =              (receivedChars[0]);   //  0x05 = reading BMS  0x03 = writing to BMS
  error_status =            (receivedChars[1]);   //  0x80 = error        0x00  = OK
  data_length =             (receivedChars[2]);   //  dta length of received packet including this byte
  Volt_low_byte =           (receivedChars[3]);   //  required  total Voltage
  Volt_high_byte =          (receivedChars[4]);   //  required  total Voltage
  current_low_byte =        (receivedChars[5]);   //  required  current ********* check reads negative
  current_high_byte =       (receivedChars[6]);   //  required  current ********* check reads negative
  balance_cap_hbyte =       (receivedChars[7]);   //  4 byte long number
  balance_cap_lbyte =       (receivedChars[8]);   //  4 byte long number
  rate_cap_hbyte =          (receivedChars[9]);   //  capcity of battery in mAh i.e. 305000 = 305Ah
  rate_cap_lbyte =          (receivedChars[10]);  //  capcity of battery in mAh i.e. 305000 = 305Ah
  cycle_hbyte =             (receivedChars[11]);  //  number of charge / discharge cycles (currently not used)
  cycle_lbyte =             (receivedChars[12]);  //  number of charge / discharge cycles (currently not used)
  prod_date_hbyte =         (receivedChars[13]);  //  production date of BMS
  prod_date_lbyte =         (receivedChars[14]);  //  production date of BMS
  bal_status_hbyte =        (receivedChars[15]);  //  8 x cell balance flags  0 = not balancing 1 = balance in progress
  bal_status_lbyte =        (receivedChars[16]);  //  8 x cell balance flags  0 = not balancing 1 = balance in progress
  prot_status_high_byte =   (receivedChars[19]);  //  8 x cell protection flags 0 = protection off  1 = protection on
  prot_status_low_byte =    (receivedChars[20]);  //  8 x cell protection flags 0 = protection off  1 = protection on
  versionNo =               (receivedChars[21]);  //  BMS sofware version
  RSOC =                    (receivedChars[22]);  //  remaining charge capaicty 0-100%
  fet_status =              (receivedChars[23]);  //  bit 0 = charge 0  bit 1 = discharge   0 = FET off 1 = FET on
  num_of_strings =          (receivedChars[24]);  //  number of series connected cells (should read 16)
  num_of_NTCS =             (receivedChars[25]);  //  number of temperature thermistors (should read 3)
  temperature_1_low_byte =  (receivedChars[26]);  //  thermistor temperature 1
  temperatue_1_high_byte =  (receivedChars[27]);  //  thermistor temperature 1
  temperature_2_low_byte =  (receivedChars[28]);  //  thermistor temperature 2
  temperatue_2_high_byte =  (receivedChars[29]);  //  thermistor temperature 2
  temperature_3_low_byte =  (receivedChars[30]);  //  thermistor temperature 3
  temperatue_3_high_byte =  (receivedChars[31]);  //  thermistor temperature 3
}
//_________________________________________________________________________________________________________


//------------------- convert values read from BMS to values the inverter can understand --------------
void convert() {


  //------ pack voltage ------------------------------------------------------------

  V_result = (Volt_low_byte << 8) + Volt_high_byte;             //  turn 2 bytes into 16 bit int

  Voltage = (V_result * 0.01);                                  //  human readable float for debugging

  //------ pack current ------------------------------------------------------------

  I_result = (current_low_byte << 8) + current_high_byte;   //  turn 2 bytes into 16 bit int


  current = (I_result * 0.01);                            //  human readable float for debugging


  //----- battery Ah rate in mA --------------------------------------------------------------------------

  rate = (rate_cap_hbyte << 8) + rate_cap_lbyte;      //  turn 2 bytes into 16 bit int

  Ah_rate = (rate / 100);                              //  human readable format for debugging

  //---------------------------------- temperature 1 -----------------------------------------------------

  temp_1 = (temperature_1_low_byte << 8) + temperatue_1_high_byte;  //  convert 2 bytes into 16 bit int
  temperature_1 = (temp_1 - 2731) / 10;

  //----------------------------------- temperature 2 ----------------------------------------------------

  temp_2 = (temperature_2_low_byte << 8) + temperatue_2_high_byte;  //  convert 2 bytes into 16 bit int
  temperature_2 = (temp_2 - 2731) / 10;

  //---------------------------------- temperature 3 -----------------------------------------------------

  temp_3 = (temperature_3_low_byte << 8) + temperatue_3_high_byte;  //  convert 2 bytes into 16 bit int
  temperature_3 = (temp_3 - 2731) / 10;

  //--------------------------------------------------------------------------------------------------------

  temperaureCombined = (temperature_2 + temperature_3) / 2;





  //convert 2x bytes into 16 bit int
  byte voltLow = 0xD8; //0x10  4200 0xFF -4200
  byte voltHigh = 0xF0; //0x19 4200 0xD8 -4200
  uint16_t charge;
  uint16_t discharge;

  int V1 = (voltLow << 8) + voltHigh; //  V1 is the output to the inverter

  if (V1 > 0) charge = V1;            //  if the
  if (V1 < 0) discharge = abs(V1);


  //------------------------------------------------------------------------------------------------------

  //turn 16 bit int into 2x bytes

  byte chargeOutLowByte;
  byte chargeOutHighByte;



  byte dischargeOutLowByte;
  byte dischargeOutHighByte;


  float convFlt = V1 * 0.01;
  chargeOutLowByte = (charge >> 8);
  chargeOutHighByte = charge;

  dischargeOutLowByte = (discharge >> 8);
  dischargeOutHighByte = discharge;



}

//_______________________________________________________________________________________________________


void canbusSend() { //  ---------- send can bus message to inverter ----------------------------------

  //--------------------------------------- packet 1 ------ protection bits --------------------------

  addressID = 0x359;  //  (flags)   set as per pylon protocol

  CAN_MSG[0] = 0x00;
  CAN_MSG[1] = 0x00;
  CAN_MSG[2] = 0x00;
  CAN_MSG[3] = 0x00;
  CAN_MSG[4] = 0x0A;
  CAN_MSG[5] = 0x50;  //  sends ASCII 'P'
  CAN_MSG[6] = 0x4E;  //  sends ASCII 'N'
  CAN_MSG[7] = 0x00;

  byte sndStat = CAN0.sendMsgBuf(addressID, 0, 8, CAN_MSG);   //  send manufacurers name

  //----------------packet 2------- charge / discharge voltage current temperature-------

  addressID = 0x351;  //                            example from martc55 (8 bytes)

  CAN_MSG[0] = chargeVoltageLowByte;                          //  0x30
  CAN_MSG[1] = dischargeVoltageHighByte;                      //  0x02
  CAN_MSG[2] = chargeCurrentLimitLowByte;                     //  0xC8
  CAN_MSG[3] = chargeCurrentLimitHighByte;                    //  0x00
  CAN_MSG[4] = dischargeCurrentLimitLowByte;                  //  0x58
  CAN_MSG[5] = dischargeCurrentLimitHighByte;                 //  0x02
  CAN_MSG[6] = byte_C6; //  not used                          //  0x00
  CAN_MSG[7] = byte_C7; //  not used                          //  0x00

  sndStat = CAN0.sendMsgBuf(addressID, 0, 8, CAN_MSG);        //  send manufacurers name

  //-------------- packet 3---------- state of charge, state of health -----------------

  addressID = 0x355;  //                            example from martc55 (4 bytes)

  CAN_MSG[0] = stateOfChargeLowByte;                          //  0x41
  CAN_MSG[1] = stateOfChargeHighByte;                         //  0x00
  CAN_MSG[2] = stateOfHealthLowByte;                          //  0x63
  CAN_MSG[3] = stateOfHealthHighByte;                         //  0x00
  CAN_MSG[4] = 0x00;
  CAN_MSG[5] = 0x00;
  CAN_MSG[6] = 0x00;
  CAN_MSG[7] = 0x00;


  sndStat = CAN0.sendMsgBuf(addressID, 0, 8, CAN_MSG);        //  send manufacurers name

  //------------------- packet 4 --------canbus send voltage current temperature-------------

  addressID = 0x356;  //                            example from martc55 (6 bytes)

  CAN_MSG[0] = 0xB8;  //  packVoltageLowByte;                 //  0xB8
  CAN_MSG[1] = 0x14;  //  packVoltageHighByte;                //  0x14
  CAN_MSG[2] = 0xF7;  //  packCurrentLowByte;                 //  0xF7
  CAN_MSG[3] = 0xFF;  //  packCurrentHighByte;                //  0xFF
  CAN_MSG[4] = 0x54;  //  packTempLowByte;                    //  0x54
  CAN_MSG[5] = 0x01;  //  packTempHighByte;                   //  0x01
  CAN_MSG[6] = 0x00;
  CAN_MSG[7] = 0x00;



  sndStat = CAN0.sendMsgBuf(addressID, 0, 8, CAN_MSG);        //  send manufacurers name

  //---------------- packet 5 ----------charge request flags----------------------


  addressID = 0x35C;  //


  //  *byte 0 bit 0 = 1 (charge enable)
  //  *byte 0 bit 1 = 1 (discharge enable


  CAN_MSG[0] = 0xC0;    //  this byte used only as per *
  CAN_MSG[1] = 0x00;
  CAN_MSG[2] = 0x00;
  CAN_MSG[3] = 0x00;
  CAN_MSG[4] = 0x00;
  CAN_MSG[5] = 0x00;
  CAN_MSG[6] = 0x00;
  CAN_MSG[7] = 0x00;


  sndStat = CAN0.sendMsgBuf(addressID, 0, 8, CAN_MSG); //  send manufacurers name


  //-------------packet 6 ---------canbus send manufactures name----------------------

  addressID = 0x35E;

  MSG_RustyK[0] = 1;
  MSG_RustyK[1] = 2;
  MSG_RustyK[2] = 3;
  MSG_RustyK[3] = 4;
  MSG_RustyK[4] = 5;
  MSG_RustyK[5] = 6;
  MSG_RustyK[6] = 7;
  MSG_RustyK[7] = 8;


  sndStat = CAN0.sendMsgBuf(addressID, 0, 8, MSG_RustyK); //  send manufacurers name


  //   example from martc55 (8 bytes)

  //CAN_MSG[0] = 0x50;  //  'P'
  //CAN_MSG[1] = 0x59;  //  'Y'
  //CAN_MSG[2] = 0x4C;  //  'L'
  //CAN_MSG[3] = 0x4F;  //  'O'
  //CAN_MSG[4] = 0x4E;  //  'N'
  //CAN_MSG[5] = 0x20;  //  ' '
  //CAN_MSG[6] = 0x20;  //  ' '
  //CAN_MSG[7] = 0x20;  //  ' '


}
//__________________________________________________________________________________________________

void temperatureControl() { //------- turn heater on bellow value set in declarations section


  if (temperaureCombined < heaterSet) digitalWrite (heater, HIGH); //  turn on heater and heater led
  if (temperaureCombined > heaterSet) digitalWrite (heater, LOW); //  turn on heater and heater led


  //***************** this will likely need some sort of hysteresis added although it operates at
  //                  1 second intervals




}
//************************* end of code ***********************************************************

//                                information from data sheets

/*------------------------------ from BMS  ---------------------------

                        ****BMS protection****

  high byte                   low byte

  0 single cell OVP           0 charge over current
  1 single cell UVP           1 discharge over current
  2 pack OVP                  2 short circuit protection
  3 pack UVP                  3 front end IC failure
  4 charge high temp          4 MOS sofware lock
  5 charge low temp           5 not used
  6 discharge high temp       6 not used
  7 discharge low temp        7 not used

  ================================================================================

  inverter can bus format

  can bus address 0x359 (flags)

  byte 0                byte 1          byte 2            byte 3

  bit 0 not used        chr over cur    not used          charge hi I
  bit 1 cell/pack OVP   not used        cell/pack hi V    not used
  bit 2 cell/pacl UVP   not used        cell/pack lo V    not used
  bit 3 cell over T     syst error      cell hi temp      int com fail
  bit 4 cell Under T    not used        cell low temp     not used
  bit 5 not usred       not used        not used          not used
  bit 6 not used        not used        not used          not used
  bit 7 dis over cur    not used       not used           not used
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  can bus address 0x351 (charge voltage, charge current, discharge voltsge

  byte 0 charge Voltage low byte 0.1V per unit 16 bits unsigned
  byte 1 charge Voltage high byte 0.1V per unit 16 bits unsigned
  byte 2 charge current limit low byte 0.1V per unit 16 bits unsigned
  byte 3 charge current limit high byte 0.1V per unit 16 bits unsigned
  byte 4 discharge Voltage low byte 0.1V per unit 16 bits unsigned
  byte 5 discharge Voltage high byte 0.1V per unit 16 bits unsigned
  byte 6 not used
  byte 7 not used
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  can bus address 0x355 (state of charhe, state of health)

  byte 0 state of charge low byte
  byte 1 state of charge high byte
  byte 2 state of health low byte
  byte 3 state of health high byte

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  can bus address 0x356  (pack voltage, pack current, pack temperature)

  byte 0 pack Voltage low byte
  byte 1 pack voltage high byte
  byte 2 pack current low byte
  byte 3 pack current high byte
  byte 4 pack temperature low byte
  byte 5 pack temperature high byte

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  can bus address 0x35C  charge limits, force charge, enable charge, enable discharge)

  byte 0

  bit 0 not used                              set to 0
  bit 1 not used                              set to 0
  bit 2 not used                              set to 0
  bit 3 request full charge                   set to 0
  bit 4 request force charge                  set to 0
  bit 5 request force charge                  set to 0
  bit 6 discharge enable                      set to 1
  bit 7 charge enable                         set to 1
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  can bus address 0x35E (manufacterers name)

  byte 0 manufactuers name char 0
  byte 1 manufactures name char 1
  byte 1 manufactures name char 2
  byte 1 manufactures name char 3
  byte 1 manufactures name char 4
  byte 1 manufactures name char 5
  byte 1 manufactures name char 6
  byte 1 manufactures name char 7

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  the inverter should rely with:

      0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00


  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  pylontech protocol default value (curticy of martc55)

  0x359   00 00 00 00 00 50 4E      7 bytes   Protection and alarm flags
  0x351   38 00 D0 07 70 17 00 00   8 bytes   Battery voltage and current limits
  0x355   1A 00 64 00               4 bytes   state of charge / state of health
  0x356   4E 13 02 03 04 05         6 bytes   voltage / current /temperature
  0x35C   C0 00                     2 bytes   battery charge request flags
  0x35E   50 59 4C 4F 4E 20 20 20   8 bytes   manufacterers name("PLYON")

  0x305   00 00 00 00 00 00 00 00   8 bytes   sent every second from solis inverter

  -----------------------------------------------------------------------

*/
