/* load this code onto a uno or similar complete with an RS485 shield, the uno will then act as 
 *  a BMS simulator in the absence of the BMS. Tested and working with my BMS interface board.

 *  Results shown when using the BMS to inverter interface board code should give the following results;
 *  Voltsge = 41.21 V
 *  current = -100 A
 *  balance capacity = 200  Ah
 *  remaining capacity = 98 %
 *  temperature 1 = 23 C
 *  temperature 2 = 24 C
 *  temperature 3 = 25 C
 */


/*
**************************************************************************************************
                             Disclaimer

Please feel free to use or modify this code, however I am in no way a profesional programer and this
code is very much work in progress so there will be bugs and mistakes, therefore I can and will not
be held responsible for any loss damage or mishaps resulting from the use of this code.
**************************************************************************************************
*/

//  version 1.0

#include <SoftwareSerial.h>

const byte rxPin = 2;                 //  RS485 rx pin
const byte txPin = 3;                 //  RS485 tx pin
const byte TX_enable = 4;             //  RS485 tx enable pin
int ledPin = 13;                      //  led pin for debugging


bool ledState = LOW;

const byte numChars = 7;                   //  index for array
uint8_t receivedChars[numChars];
boolean newData = false;                    //  flag indicating new dataq received

unsigned long previousMillis = 0;           //  used for code cycle timing
const long interval = 1000;                 //  code cycle time (set for 1 second)





SoftwareSerial RS485Serial (rxPin, txPin);

void setup() {

  pinMode(rxPin, INPUT);
  pinMode(txPin, OUTPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(TX_enable, OUTPUT);
  RS485Serial.begin(9600);
  Serial.begin(115200);


}
//----------------------------------------------------------------------------

//  data request from BMS should be

//DD  A5  AA  0 FF  56  77  (HEX)
//221 165 170 0 255 86  119 (DEC)

//  0xDD = start bit
//  0x77 = stop bit



void loop() {

  //---------------------- untimed code ----------------------------------------------------

  receive();



  //----------------------- end of untimed code --------------------------------------------------------


  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {

    // save the last time you blinked the LED
    previousMillis = currentMillis;
    //----------------------------- timed code, this code runs once per second --------------------------


showNewData();  //  show request data from BMS on serial console


    if (receivedChars[0]== 0xA5) reply(); //  if first part of the requet is correct send data packet


  }
}

//----------------- end of loop ------------------------------------------------------
//_________________________________________________________________________________________

void receive() {          //------------------- receive serial data from RS485 ----------------


  static boolean recvInProgress = false;
  static byte ndx = 0;
  char startMarker = 221; //221
  char endMarker = 119; // 119
  char rc;

  while (RS485Serial.available() > 0 && newData == false) {

    rc = RS485Serial.read();

    if (recvInProgress == true) {

      if (rc != endMarker) {

        receivedChars[ndx] = rc;
        ndx++;
        if (ndx >= numChars) {

          ndx = numChars - 1;
        }
      }
      else {
        receivedChars[ndx] = '\0'; // terminate the string
        recvInProgress = false;
        ndx = 0;
        newData = true;
      }
    }
    else if (rc == startMarker) {
      recvInProgress = true;
    }
  }
}

//------------------------------- reply -----------------------------------

void reply() {


  //                 | A   |  B  |C |  D  |  E  | F   | G   |  H  | I   |     J     |  K  |  L  |M |N | O   |  p  |Q | R   |S |T| U |V| W   |  X  |  Y  |  Z   | a   | b  |  c   | d   | d  |  f   |g |h |   i     |   j     |  k   |l|     m      | n   |
  uint8_t data[40] = {0xDD, 0x03, 0, 0x26, 0x10, 0x19, 0xD8, 0xF0, 0x4C, 0xFFFFFF8E, 0x4E, 0x20, 0, 0, 0x2D, 0x5C, 0, 0x0A, 0, 0, 0, 0, 0x40, 0x62, 0x03, 0x0A, 0x3, 0x0B, 0xA3, 0x0B, 0xA4, 0x0B, 0xA5, 0, 0xCF256F, 0xCA5200, 0x3E8, 0, 0xC400C500, 0x77};
  //                                           42.10V      100A                                                                                                    T1    T1 x  T2    t2 x  t3    t3 x
  
  digitalWrite(TX_enable,HIGH);   //  set RS485 transmit enable pin high
  digitalWrite(ledPin,HIGH);      //  set on board led on
  RS485Serial.write(data, 40);    //  send the data packet to the BMS
  delay(3);                       //  short delat to enable serial time to finish
  digitalWrite(TX_enable,LOW);    //  set RS485 transmit enable pin low
  digitalWrite(ledPin,LOW);       //  turn off on board led

}

//-----------------------------------------------------------------------------

void showNewData(){
    Serial.println(" ");
    Serial.print("Recieved data packet   ");

    if (newData == true) {
      for (int i = 0; i < 5; i++) {

        Serial.print(receivedChars[i], HEX);
        Serial.print(" ");
      }
    }
    newData = false;
    Serial.println(" ");

}
